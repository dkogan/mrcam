#!/usr/bin/python3


r'''mrcam camera preview tool

SYNOPSIS

  $ mrcam
  [ A window pops up showing a live view of the first available camera ]

This tool provides the most basic camera tools: an image preview with some
rudimentary image capture and parameter control

'''


import sys
import argparse
import re
import os

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--verbose',
                        action='store_true',
                        help='''If given, we turn on mrcam verbose reporting.
                        This is separate from the deeper diagnostics provided by
                        aravis using the ARV_DEBUG environment variable. See the
                        aravis documentation for those details''')

    parser.add_argument('--period',
                        type=float,
                        default = 1.0,
                        help='''Image capture period, in seconds. Defaults to
                        1.0sec/frame''')

    parser.add_argument('--single-buffered',
                        action='store_true',
                        help='''By default the image display is double-buffered
                        to avoid flickering. Some graphics hardare (in
                        particular my old i915-based system) are buggy, and
                        don't work right in this mode, so --single-buffered is
                        available to disable double-buffering to work around
                        those bugs''')

    parser.add_argument('camera',
                        type = str,
                        nargs = '*',
                        default = ('',),
                        help='''The camera(s) to talk to. One argument per
                        camera. These are strings passed to the arv_camera_new()
                        function; see that function's documentation for details.
                        The strings can be IP addresses or MAC addresses or
                        vendor-model-serialnumber strings. If omitted, we
                        initialize a single device: the first available camera''')

    args = parser.parse_args()

    if len(args.camera) > 1:
        print("ERROR: at this time this tool only supports one camera",
              file = sys.stderr)
        sys.exit(1)

    return args


args = parse_args()

import numpy as np
import numpysane as nps
from fltk import *
from Fl_Gl_Image_Widget import Fl_Gl_Image_Widget
import mrcal
import mrcam



class Fl_Gl_Image_Widget_Derived(Fl_Gl_Image_Widget):
    def handle(self, event):
        if event == FL_MOVE:
            try:
                q = self.map_pixel_image_from_viewport( (Fl.event_x(),Fl.event_y()), )
                status_widget.value(f"{q[0]:.1f},{q[1]:.1f}")
            except:
                status_widget.value("")
            # fall through to let parent handlers run

        return super().handle(event)


window        = Fl_Window(800, 600, "mrcam stream")
group         = Fl_Group(0,0,800,580)
image_widget  = Fl_Gl_Image_Widget_Derived(0,  0, 800,580,
                                           double_buffered = not args.single_buffered)
group.end()
status_widget = Fl_Output(0, 580, 800, 20)
window.resizable(group)
window.end()
window.show()


# try block needed to avoid potential crashes:
#   https://sourceforge.net/p/pyfltk/mailman/pyfltk-user/thread/875xx5ncgp.fsf%40secretsauce.net/#msg58754407
try:
    c = mrcam.camera(args.camera[0],
                     verbose = args.verbose)
except Exception as e:
    window.hide()
    raise e






def callback_image_ready(fd):
    frame = c.requested_image()

    image        = frame['image']
    timestamp_us = frame['timestamp_us']

    if image is not None:

        if image.itemsize > 1:
            image = mrcal.apply_color_map(image)

        image_widget.update_image(image_data = image)

    else:
        print("Error capturing the image. I will try again",
              file=sys.stder)

    Fl.add_timeout(args.period, update)

def update(*args):

    # try block needed to avoid potential crashes:
    #   https://sourceforge.net/p/pyfltk/mailman/pyfltk-user/thread/875xx5ncgp.fsf%40secretsauce.net/#msg58754407
    try:
        c.request()
    except Exception as e:
        window.hide()
        raise e




Fl.add_fd( c.fd_image_ready,
           callback_image_ready )

update()

Fl.run()
