#!/usr/bin/python3


r'''mrcam camera preview tool

SYNOPSIS

  $ mrcam

  [ A window pops up showing a live view of the first available camera ]

This tool provides the most basic camera tools: an image preview with some
rudimentary image capture and parameter control

'''


import sys
import argparse
import re
import os

import mrcam

def parse_args():

    parser = \
        argparse.ArgumentParser(description = __doc__,
                                formatter_class=argparse.RawDescriptionHelpFormatter)

    mrcam._add_common_cmd_options(parser,
                                  single_camera = False)

    parser.add_argument('--outdir',
                        help='''The output directory to write images to. If
                        omitted, we do NOT write any output images to disk; we
                        just display them as they come in''')
    parser.add_argument('--jpg',
                        action='store_true',
                        help='''If given, we write the output images as .jpg
                        files, using lossy compression. If omitted, we write out
                        lossless .png files (bigger, much slower to compress,
                        decompress). Some pixel formats (deep ones, in
                        particular) do not work with.jpg''')

    args = parser.parse_args()

    mrcam._parse_args_postprocess(args)

    return args


args = parse_args()

if args.power_cycle_at_startup or \
   args.power_down_when_finished:
    if args.trigger != 'TTYS0':
        print("Power control is only available with '--trigger TTYS0'",
              file = sys.stderr)
        sys.exit(1)


from fltk import *
import math
import mrcal

def process_image_callback(image,
                           *,
                           iframe,
                           icam,
                           outdir,
                           extension):

    if outdir is None:
        return

    path = f"{outdir}/frame{iframe:05d}-cam{icam}.{extension}"
    mrcal.save_image(path, image)

    print(f"Wrote '{path}'", file=sys.stderr)




kwargs = dict()
if args.dims is not None:
    kwargs['width' ] = args.dims[0]
    kwargs['height'] = args.dims[1]
if args.pixfmt is not None:
    kwargs['pixfmt'] = args.pixfmt
if args.trigger is not None:
    kwargs['trigger'] = args.trigger

Ncameras = len(args.camera)
cameras           = [None] * Ncameras
image_view_groups = [None] * Ncameras
for i,camera in enumerate(args.camera):
    cameras[i] = \
        mrcam.camera(camera,
                     verbose = args.verbose,
                     recreate_stream_with_each_frame = args.recreate_stream_with_each_frame,
                     power_cycle_at_startup          = args.power_cycle_at_startup,
                     power_down_when_finished        = args.power_down_when_finished,
                     **kwargs)

    # Only the first camera can control the power. Its trigger and power signals
    # apply to ALL the cameras
    if args.trigger == 'TTYS0':
        args.power_cycle_at_startup   = False
        args.power_down_when_finished = False
        args.trigger                  = 'HARDWARE_EXTERNAL'



W = 800
H = 600

window = Fl_Window(W,H, "mrcam stream")


Ngrid = math.ceil(math.sqrt(Ncameras))
Wgrid = Ngrid
Hgrid = math.ceil(Ncameras/Wgrid)

w    = W//Wgrid
h    = H//Hgrid
icam = 0
y0   = 0

for i in range(Hgrid):
    x0 = 0

    for j in range(Wgrid):
        image_view_groups[icam] = \
            mrcam.Fl_Image_View_Group(x0,y0,
                                      w if j < Wgrid-1 else (W-x0),
                                      h if i < Hgrid-1 else (H-y0),
                                      camera          = cameras[icam],
                                      single_buffered = args.single_buffered,
                                      feature_names   = args.features)
        image_view_groups[icam].set_up_image_capture(args.period,
                                                     process_image_callback = process_image_callback,
                                                     extension              = "jpg" if args.jpg else "png",
                                                     outdir                 = args.outdir,
                                                     icam                   = icam)


        x0   += w
        icam += 1

    y0 += h

window.resizable(window)
window.end()
window.show()


Fl.run()
