Give a memory buffer back to the driver, to use for future incoming frames

SYNOPSIS

    from fltk import *
    from Fl_Gl_Image_Widget import Fl_Gl_Image_Widget

    def callback_mrcam(fd):
        frame = camera.requested_image()
        if frame['image'] is not None:
            image_widget.update_image(image_data = frame['image'])
        camera.push_buffer(frame['buffer']) # no-op if the buffer is None
        Fl.add_timeout(1., camera.request)


    camera = mrcam.camera(...,
                          Nbuffers = 10)

    Fl.add_fd( camera.fd_image_ready,
               callback_mrcam )
    camera.request()

    window       = Fl_Window(800,600, "mrcam")
    image_widget = Fl_Gl_Image_Widget(0,0, 800,600)

    window.resizable(image_widget)
    window.end()
    window.show()

    Fl.run()

    ### An interactive GUI window pops up, displaying the live camera feed at
    ### 1Hz


The camera driver is asked to create some number of frame buffers in the
mrcam.camera() constructor (Nbuffers = 10 in the example above). As images are
received by the host, the driver writes them into these buffers. mrcam then
gives images to the application as pointers into these buffers. When the
application is done processing an image, it must give the buffer back to the
driver by calling mrcam.push_buffer(). Doing this makes the buffer available to
use for future incoming frames. If the number of extant images (ones that
haven't had been pushed back) exceed Nbuffers, then image capture will fail: the
driver will have nowhere to put the new images.

mrcam.push_buffer() must be called for frames reported to us in
camera.requested_image() and camera.pull().

ARGUMENTS

- buffer: the buffer to push. Given to us in frame['buffer'] by
  camera.requested_image() or camera.pull()

RETURNED VALUE

None
